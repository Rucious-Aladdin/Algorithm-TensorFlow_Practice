maze = [
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 9],
    [9, 0, 9, 0, 0, 0, 9, 9, 0, 9, 9, 9],
    [9, 0, 9, 9, 0, 9, 0, 0, 0, 9, 0, 9],
    [9, 0, 0, 0, 9, 0, 0, 9, 9, 0, 9, 9],
    [9, 9, 9, 0, 0, 9, 0, 9, 0, 0, 1, 9],
    [9, 0, 0, 0, 9, 0, 9, 0, 0, 9, 9, 9],
    [9, 0, 9, 0, 0, 0, 0, 9, 0, 0, 9, 9],
    [9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9],
    [9, 0, 9, 0, 9, 0, 9, 0, 0, 9, 0, 9],
    [9, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
]

#우수법을 이용한 탐색 -> 방문하지 않은장소 길이 +1, 방문한 장소의 경우에는 -1을 하여 최단거리 발견 가능!

#이동방향 설정
dir = [[1, 0], [0, 1], [-1, 0], [0, -1]]
# 0 -> -1 % 4 = -1 * 4 + "3"
x, y, depth, d = 1, 1, 0, 0

while maze[x][y] != 1:
    maze[x][y] = 2    
    for i in range(len(dir)):
        j = ((d - 1) + i) % len(dir)
        # 파이썬 음수 모듈러 연산을 주의해서 확인해야 한다.
        # (d-1) 진행방향의 오른쪽 방향을 기준으로 +i (왼쪽 회전을 준다)로 이해하면 쉬울듯.       
        if maze[x + dir[j][0]][y + dir[j][1]] < 2:
            x += dir[j][0]
            y += dir[j][1]
            d = j
            depth += 1
            break
        elif maze[x + dir[j][0]][y + dir[j][1]] == 2:
            x += dir[j][0]
            y += dir[j][1]
            d = j
            depth -= 1
            break

print(depth)