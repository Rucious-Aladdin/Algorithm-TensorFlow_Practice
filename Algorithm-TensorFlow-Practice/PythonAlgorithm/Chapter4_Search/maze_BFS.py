maze = [
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 9],
    [9, 0, 9, 0, 0, 0, 9, 9, 0, 9, 9, 9],
    [9, 0, 9, 9, 0, 9, 0, 0, 0, 9, 0, 9],
    [9, 0, 0, 0, 9, 0, 0, 9, 9, 0, 9, 9],
    [9, 9, 9, 0, 0, 9, 0, 9, 0, 0, 0, 9],
    [9, 0, 0, 0, 9, 0, 9, 0, 0, 9, 1, 9],
    [9, 0, 9, 0, 0, 0, 0, 9, 0, 0, 9, 9],
    [9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9],
    [9, 0, 9, 0, 9, 0, 9, 0, 0, 9, 0, 9],
    [9, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
]

# 9는 벽, 0은 길, 1은 골임. 2는 지나온 길을 덮어쓸때 사용.
# 외벽을 쉽게 판정하기위해 테두리를 9숫자로 둘렀음. -> sentinel개념이라고 부름.

#초기위치, depth 설정 (x좌표, y좌표, depth 순)
pos = [[1, 1, 0]] # 2차원 리스트임에 주의!

while len(pos) > 0:
    x, y, depth = pos.pop(0)
    
    if maze[x][y] == 1:
        print(depth)
        break
    
    #탐색완료 설정
    maze[x][y] = 2
    
    if maze[x-1][y] < 2:
        pos.append([x - 1, y, depth + 1])
    
    if maze[x+1][y] < 2:
        pos.append([x + 1, y, depth + 1])
    
    if maze[x][y -1] < 2:
        pos.append([x, y - 1, depth + 1])
    
    if maze[x][y + 1] < 2:
        pos.append([x, y + 1, depth + 1])
